What happens when you initialize a repository? Why do you need to do it?
----------------------------------------------------------------------------------------------
At the time of initialization Git creates a hidden metadata folder.If there are files present in 
the directory at the time of initialization they are treated as new unstaged and uncommitted
changes. Git needs to know what directory to control. It would be overwhelming if git controlled
every directory in the operating system. 
----------------------------------------------------------------------------------------------

How is the staging area different from the working directory and the repository? 
What value do you think it offers?
----------------------------------------------------------------------------------------------
The Staging area is an intermediate area that allows you to specify the changes to be committed. 
This is a good function to have because it makes it simple to splite up larger commits into smaller commits.
Only the contents of the staging area will be committed to the repository.
----------------------------------------------------------------------------------------------

How can you use the staging area to make sure you have one commit per logical change?
----------------------------------------------------------------------------------------------
You can partially add pieces instead of having to save all the changes at once. 
----------------------------------------------------------------------------------------------

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Adding new experimental feature. Main brach would be intact if the experimental changes give unsatisfactory result

How do the diagrams help you visualize the branch structure?

Clarifying reachable and unrecable commits in each branch. 

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

A new commit is created with the former commit tips as parents. When you run git log, the commits of both branches will be shown sorted by date. Common practice is to checkout one of the branches to be merged and then branch the other into the current. Diagram is helpful in showing where branches where created. This is helpful when using diff.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Doing manually pro:
* Full control


Doing manually cons:
* A lot of extra work

Auto pro:
* Simplifies merging when the same lines are not modified

Auto cons:


----------------------------------------------------------------------------------------------
Useful command's + info

Initialize a directory for version control. This command creates a hidden folder .git that
contains metadata. You will need to tell git what files to keep track of even if you have files
in the directory at the time of initialization.
git init

Reset the state of a modified unstaged file to the state from the previous commit
(Discard changes in the working directory)
git checkout "filename"

Discards either changes in the working directory or the staging area. Be very careful
when using this command beacuse the changes you discard are not committed.
git reset --hard
