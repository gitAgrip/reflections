What happens when you initialize a repository? Why do you need to do it?
----------------------------------------------------------------------------------------------
At the time of initialization Git creates a hidden metadata folder.If there are files present in 
the directory at the time of initialization they are treated as new unstaged and uncommitted
changes. Git needs to know what directory to control. It would be overwhelming if git controlled
every directory in the operating system. 
----------------------------------------------------------------------------------------------

How is the staging area different from the working directory and the repository? 
What value do you think it offers?
----------------------------------------------------------------------------------------------
The Staging area is an intermediate area that allows you to specify the changes to be committed. 
This is a good function to have because it makes it simple to splite up larger commits into smaller commits.
Only the contents of the staging area will be committed to the repository.
----------------------------------------------------------------------------------------------

How can you use the staging area to make sure you have one commit per logical change?
----------------------------------------------------------------------------------------------
By being selective when adding files to staging and then committing only a bundle of changes 
that make up a logical change. Timing is important still, if you add many changes to one file 
since your last commit its hard to separate the changes from eachother by using the staging area.
In a different situation where you have created multiple changes but they are alle separated
in different files, the staging area can provide a way of fine graining the changes into multiple
smaller commits.
----------------------------------------------------------------------------------------------

What are some situations when branches would be helpful in keeping your history organized? 
How would branches help?
----------------------------------------------------------------------------------------------
New experimental features can be organized into separate branches. When committing changes to
a new branch the main branch stays unaffected and intact. By labeling you have a way of organizing
different versions. 
----------------------------------------------------------------------------------------------

How do the diagrams help you visualize the branch structure?
----------------------------------------------------------------------------------------------
The branch structure of the repository is like a tree were all the children knows there parent.
When looking at a diagram of the branches we can tell where different versions branched of.
Diagrams made by Git do not displayed unlabled unreachable commits. In order to have the displayed
you can go to the tip of the commit and label or tag it.
----------------------------------------------------------------------------------------------

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

A new commit is created with the former commit tips as parents. When you run git log, the commits of both branches will be shown sorted by date. Common practice is to checkout one of the branches to be merged and then branch the other into the current. Diagram is helpful in showing where branches where created. This is helpful when using diff.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Doing manually pro:
* Full control


Doing manually cons:
* A lot of extra work

Auto pro:
* Simplifies merging when the same lines are not modified

Auto cons:


----------------------------------------------------------------------------------------------
Useful command's + info

Initialize a directory for version control. This command creates a hidden folder .git that
contains metadata. You will need to tell git what files to keep track of even if you have files
in the directory at the time of initialization.
git init

Reset the state of a modified unstaged file to the state from the previous commit
(Discard changes in the working directory)
git checkout "filename"

Discards either changes in the working directory or the staging area. Be very careful
when using this command beacuse the changes you discard are not committed.
git reset --hard


You can checkout the branch label to get to the tip of your branch. When HEAD is not
referencing your branch labeled commit on you current branch you are in detached HEAD state.
git checkout master

You add ^ signs to denote how many steps you would like to move down from the branch tip.
Be aware that you might not end up in the same place where you expect when looking at the log.
This might be due to merges you have made, use git --oneline --graph at the tip to see the path
you will move along.
git checkout master^ - one step down
git checkout master^^^ - three steps down

Visualize the branch structure of two branches
git log --oneline --graph <branch1> <branch2>

Merge two commits into a new commit, the new commit will have references to both commits, but only
one off the labels will advance. The other lable is usually deleted. If there are no conflics meaning 
that the same line has been edited in both commits, then git performeres auto merge. Else git opens
the core editor so you can sort out how the final commit should look like.
git merge <branch1> <branch2>

The git diff command can end up showing much more then you think should be displayed when
running diff between a commit and what seems to be the parent from the log. After merges there are
more commits in the log and they do not necessarly have a parent children relationship even
if they are listest in such manner. This is because git log commits are sorted by date. Here is a 
command that will show what changes that were introduced in a commit with regards to its parent.
The id is the children id because you do not know the parent id.
git show <id>
