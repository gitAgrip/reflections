How did viewing a diff between two versions of a file help you see the bug that was introduced?
----------------------------------------------------------------------------------------------
Diff helps you pinpoint all the lines that dffer between versions. 
This comes in handy when trying to identify bugs. It is much easyer to search through a small
set of changed lines than it is to look through the entire code.   

Diff can output differences in mutliple formats, by default git diff uses the unified diff format.
Diff compares lines. It's a good idea to make the code diff friendly by using short lines.

<git diff original new>
<diff -u original new>
----------------------------------------------------------------------------------------------

How could having easy access to the entire history of a file make
you a more efficient programmer in the long term?
----------------------------------------------------------------------------------------------
Accessable history helps in reducing the time spent on errors and bugs. But the history should 
contain sutable information, if we have history of each single added or removed charcter this 
could be too much information. if we only save three states in development of a 10 000 line file.
This could be to little information. Logical changes can be considered suitable. If you have a 
history of logical changes you can review the creation step by step, then reuse knowledge from
am earliyer solution to a new problem or maybe figure out exactly when a particular bug was introduced.
It's common that development projects consist of many files not just one, changes effect many files. 
In such cases having the history of all the project files is more helpful than to just have the
history of one file.


Git can give you the history of your commits (saves), lastest one top.
<git log> 
<git log --oneline>
<git log --oneline --graph>
----------------------------------------------------------------------------------------------

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

Pros:
* Saves being logical changes
* Easy to go through changes to search for differences between versions

Cons:
* Need to remeber to save


Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

Google docs seem to be geared towards rich text editing, and git seem to be geared towards development. When you write code most often a logical change spans multiple files, while text documents in general are independent of other text documents.

How can you use the commands git log and git diff to view the history of files?

git log gives you a list of commits with id's. You can use git diff to compare the two id's to see identify the changes that where made inbetween.


How might using version control make you more confident to make changes that could break something?

It could make me more confident knowing its possible to go back. And knowing that i can see the differences to identify what code that broke the functionality.

Now that you have your workspace set up, what do you want to try using Git for?
Im going to apply vc to my development projects.
