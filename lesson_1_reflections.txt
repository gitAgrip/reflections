How did viewing a diff between two versions of a file help you see the bug that was introduced?
----------------------------------------------------------------------------------------------
Diff helps you pinpoint all the lines that dffer between versions. 
This comes in handy when trying to identify bugs. It is much easyer to search through a small
set of changed lines than it is to look through the entire code.   

Diff can output differences in mutliple formats, by default git diff uses the unified diff format.
Since diff compares lines it's a good idea to make the code diff friendly by using short lines.

----------------------------------------------------------------------------------------------

How could having easy access to the entire history of a file make
you a more efficient programmer in the long term?
----------------------------------------------------------------------------------------------
Accessable history helps in reducing the time spent on errors and bugs. But the history should 
contain sutable information, if we have history of each single added or removed charcter this 
could be too much information. if we only save three states in development of a 10 000 line file.
This could be to little information. Logical changes can be considered suitable. If you have a 
history of logical changes you can review the creation step by step, then reuse knowledge from
am earliyer solution to a new problem or maybe figure out exactly when a particular bug was introduced.
It's common that development projects consist of many files not just one, changes effect many files. 
In such cases having the history of all the project files is more helpful than to just have the
history of one file.


----------------------------------------------------------------------------------------------

What do you think are the pros and cons of manually choosing when to create a commit, 
like you do in Git, vs having versions automatically saved, like Google Docs does?
----------------------------------------------------------------------------------------------
Automaticall saves can be made at regular intervals, each save would not nessecarly contain
any difference to the previous save because you migh think
a lot instead of writing code so you could end up with a lot of surpuflouis data. Another problem
could be if a save is made at a time where you are writing code. If you were to return to the unfinished 
version for some reason your code will not run, and then you need to recreate the missing parts 
to get it to work. You could have the automatic saves being triggered by a certain nymber of lines/characters
or maybe when there is a long break. If a certain number of lines is require to make a save you would eliminate the problem of redundant saves when no changes have been committed, but the other problems still apply. 
Automatic saving might be good if you never remeber to save, 
at least you have som data. Manual saving like in git gives you 
the freedom to decide suitable increments in your development, but the manual approch requires
discipline. 

----------------------------------------------------------------------------------------------

Why do you think some version control systems, like Git, allow saving multiple files in one commit, 
while others, like Google Docs, treat each file separately?
----------------------------------------------------------------------------------------------
In programming it's common to have features that span multiple files, when separate saves are
made on each individual file it becomes more challenging to revert to an older save because
you need to go through the history of all the individual files to find the right combination.

----------------------------------------------------------------------------------------------

How can you use the commands git log and git diff to view the history of files?
----------------------------------------------------------------------------------------------
Git log gives you a list of commits with id's. You can use git diff to compare two version<Id's>.
----------------------------------------------------------------------------------------------

How might using version control make you more confident to make changes that could break something?
----------------------------------------------------------------------------------------------
Git provides the abillity to jump between all the commited states. The diff functionallity helps
to quicly identify changes between two given versions. These are helpful tools. Git has another
function where you can create an experimental branch for trying out som bold code, if the experiment
fails you can go back to the main branch which is unaffected by the experiment. 
----------------------------------------------------------------------------------------------

Now that you have your workspace set up, what do you want to try using Git for?
----------------------------------------------------------------------------------------------
Projects and collaborations.
----------------------------------------------------------------------------------------------
Useful command's + info

HEAD is what git calls the commit you are currently working on

Clone a remote repository from an url by default the git clone creates 
a new folder in the current directory where you run the command. Directory name will be
the same as the name of the repository you are cloning
git clone <url>

Show the change from the previous version to <id>
git show <id>

Show the difference between original and new
git diff <original> <new> 

Show difference between working directory and staging 
git diff

show difference between the current state of the repository and staging   
gitt diff --staged


Show the difference between original and new with unified diff format
Unified diff format is default for git diff not for diff. 
diff -u <original> <new>

Add a file to staging area
<git add>

Commit changes added to staging area
git commit
git commit -m "text"

Add and commit, give a short description without editor
git commit -am "text"

Git can give you the history of your commits (saves), lastest one top.
git log> - most resent change on top

Show status of working directory, staging and repository
git status

Show log add information on what files where changed in each commit
git log --stat

Log with online per commit
git log --oneline 

Nice to see if you have branches that are reachable, gives a graphical overview
one branches and commits
git log --oneline --graph

Log with modified files names
git log --name-only

Set all you files to the state held in the commit with <id>
git checkout <id> 

Create a new branch with the label <name> and checkit out at once
git checkout -b <name>

Create a new branch with <name>
git branch <name>

See all the local branches, and what branch you are currently working on
git branch

Show different colors for removed and added lines, by providing the global keyword
it tells git that this setting should apply across all projects
git config --global color.ui auto

Tell git what editor to trigger when writing is required
git config --global core.editor "full path of the executable/binary"


Unknown
git config --global push.default upstream
git config --global merg.conflictstyle diff3
